@model Assignment9.Controllers.TrackAddForm

@{
    ViewBag.Title = "TrackAdd";
}

<h2>Add track to album - @Model.AlbumName</h2>
<p class="text-info">Complete the form, and click the Submit button</p>

@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @* These are needed when submitted form is invalid or with missing data*@
        @Html.HiddenFor(model => model.AlbumId)
        @Html.HiddenFor(model => model.AlbumCover)
        @Html.HiddenFor(model => model.AlbumName)

        <div class="form-group">
            @Html.LabelFor(model => model.AlbumCover, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <img src="@Model.AlbumCover" alt="artist_photo" width="150" height="150" />
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @autofocus="autofocus"} })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Composers, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Composers, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Composers, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.GenreList, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Genre", Model.GenreList, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.GenreList, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AudioUpload, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AudioUpload, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AudioUpload, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Submit" class="btn btn-default" />
                @Html.ActionLink("Cancel", "Details", new { id = Model.AlbumId }, new { @class = "btn btn-default" })
            </div>
        </div>
    </div>
}


@* add this for unobtrosive validation - validation is done on the client-side before POST*@

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}